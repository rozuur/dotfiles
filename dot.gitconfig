# git log --since=00:00:00 --all --no-merges --oneline --author=<your email address>
# alias above to git today
[core]
editor = nano
excludesfile = ~/.gitignore
#pager = less -F
  pager = /usr/local/opt/git/share/git-core/contrib/diff-highlight/diff-highlight | less -F

# Make `git rebase` safer on OS X
# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
trustctime = false

# Prevent showing files whose names contain non-ASCII symbols as unversioned.
# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
precomposeunicode = false
	commitGraph = true

[alias]
a = add
s = status
co = checkout
ci = commit
cia = commit --amend
cian = commit --amend --no-edit
rb = rebase
b = branch
ps = push
pso = "!git push -u origin $(git branch-name)"
l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all -20
ls = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative -20
  la = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all
  last = log -1 -p --stat
wip = "!git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
unwip = "!git log -n 1 | grep -q -c wip && git reset HEAD~1"
d = diff --ignore-space-at-eol --diff-filter=MRCA
df = "!git diff --ignore-space-at-eol --color $@ | diff-so-fancy"
dc = diff --cached --ignore-space-at-eol
dw = diff --ignore-space-at-eol --diff-filter=MRCA --minimal --word-diff=color
# `git di $number` shows the diff between the state `$number` revisions ago and the current state
di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
# diff so fancy
dsf = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
anw = !sh -c 'git diff -w --no-color "$@" | git apply --cached --ignore-whitespace' -
slap = blame -w
cp = cherry-pick
zipbranch = !sh -c 'git archive --format zip --output $1.zip $1' -
rs = reset
rss = reset --soft
rsh = reset --hard
rbm = rebase master --ignore-date
rbc = rebase --continue
rba = rebase --abort
mt = mergetool
#brheads = !sh  -c 'git branch | sed "s/^\*/ /" | git log --pretty=format:"%h%x09%an%x09%ad%x09%s"' -
news = log -p --diff-filter=MRCA HEAD@{1}..HEAD@{0}
up = "!git remote update -p; git merge --ff-only @{u}"
fixup = "!f() { TARGET=$(git rev-parse "$1"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"
#
# Working with branches  https://gist.github.com/robmiller/6018582
#

# Get the current branch name (not so useful in itself, but used in
# other aliases)
branch-name = "!git rev-parse --abbrev-ref HEAD"
# Push the current branch to the remote "origin", and set it to track
# the upstream branch
publish = "!git push -u origin $(git branch-name)"
# Delete the remote version of the current branch
unpublish = "!(git push origin :$(git branch-name) && git branch --unset-upstream)"
# Delete a branch and recreate it from master â€” useful if you have, say,
# a development branch and a master branch and they could conceivably go
# out of sync
recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

# Fire up your difftool (e.g. Kaleidescope) with all the changes that
# are on the current branch.
code-review = difftool origin/master...

# Given a merge commit, find the span of commits that exist(ed) on that
# branch. Again, not so useful in itself, but used by other aliases.
merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

# Find the commits that were introduced by a merge
merge-log = "!git log `git merge-span .. $1`"
# Show the changes that were introduced by a merge
merge-diff = "!git diff `git merge-span ... $1`"
# As above, but in your difftool
merge-difftool = "!git difftool `git merge-span ... $1`"

# Interactively rebase all the commits on the current branch
rebase-branch = "!git rebase -i `git merge-base master HEAD`"

#
# Working with files
#

# Unstage any files that have been added to the staging area
stage = add
unstage = reset HEAD

# Mark a file as "assume unchanged", which means that Git will treat it
# as though there are no changes to it even if there are. Useful for
# temporary changes to tracked files
assume = update-index --assume-unchanged
# Reverse the above
unassume = update-index --no-assume-unchanged
# Show the files that are currently assume-unchanged
assumed = "!git ls-files -v | grep ^h | cut -c 3-"

# Checkout our version of a file and add it
ours = "!f() { git checkout --ours $@ && git add $@; }; f"
# Checkout their version of a file and add it
theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

# Delete any branches that have been merged into master
# See also: https://gist.github.com/robmiller/5133264
delete-merged-branches = "!git co master && git branch --merged | fgrep -v '+ ' | fgrep -v '* ' | xargs -n 1 git branch -d"

# Remove the old tag with this name and tag the latest commit with it.
retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"


# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"

# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"

# Find commits by source code
fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

# Find commits by commit message
fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=\"$1\"; }; f"

# List contributors with number of commits
contributors = shortlog --summary --numbered

# Merge GitHub pull request on top of the `master` branch
merge-pull-request = "!f() { \
if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
git fetch origin refs/pull/$1/head:pr/$1 && \
git rebase master pr/$1 && \
git checkout master && \
git merge pr/$1 && \
git branch -D pr/$1 && \
git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
fi \
}; f"

[diff]
tool = vimdiff

[diff "spaceman-diff"]
#command = ~/dotfiles/bin/spaceman-diff

[mergetool]
prompt = false

[help]
autocorrect = 5

[status]
# Show relative path in git status
relativePaths = true

[merge]
tool = ediff
[mergetool "ediff"]
cmd = emacs --no-init-file --eval \"(ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\")\"

[color]
ui = true

[commit]
template = ~/.gitmessage

[user]
	name = Naveen Vardhi
	email = vardhi.naveen@gmail.com
[commit]
  verbose = true


[mergetool "meld"]
  tool = meld
  trustExitCode = true
  cmd = Meld --auto-merge \"$PWD/$LOCAL\" \"$PWD/$BASE\" \"$PWD/$REMOTE\" --output=\"$PWD/$MERGED\"
[gc]
	writeCommitGraph = true
